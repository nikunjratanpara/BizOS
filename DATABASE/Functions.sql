
ALTER FUNCTION DBO.GETINSERTWITHSELECTQUERY( @TABLENAME VARCHAR(50))
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @COLUMNS VARCHAR(MAX) = '';
	DECLARE @PARAMS VARCHAR(MAX) = '';
	DECLARE @IDENTITY_COLUMN VARCHAR(50) ;
	DECLARE @QUERY VARCHAR(MAX);
	SELECT @IDENTITY_COLUMN  =  C.NAME
	 
	FROM SYS.COLUMNS C 
		INNER JOIN SYS.TABLES T ON C.OBJECT_ID = T.OBJECT_ID  
		INNER JOIN SYS.SYSTYPES ST ON ST.XTYPE = C.SYSTEM_TYPE_ID
	WHERE T.NAME= @TABLENAME
		AND COLUMNPROPERTY(T.OBJECT_ID , C.NAME, 'ISIDENTITY') = 1

	SELECT @COLUMNS = @COLUMNS + C.NAME +',' , @PARAMS = @PARAMS + '@' + C.NAME +','
	FROM SYS.COLUMNS C 
		INNER JOIN SYS.TABLES T ON C.OBJECT_ID = T.OBJECT_ID  
		INNER JOIN SYS.SYSTYPES ST ON ST.XTYPE = C.SYSTEM_TYPE_ID
	WHERE T.NAME= @TABLENAME
		AND COLUMNPROPERTY(T.OBJECT_ID , C.NAME, 'ISIDENTITY') = 0
		AND COLUMNPROPERTY(T.OBJECT_ID , C.NAME, 'ISCOMPUTED') = 0 
		AND ST.NAME != 'TIMESTAMP'
	
	SET @QUERY = 'INSERT INTO ' + @TABLENAME + '(' + SUBSTRING (@COLUMNS,0, LEN(@COLUMNS)) + ') 
			VALUES ('+ SUBSTRING (@PARAMS,0, LEN(@PARAMS)) + ')' 

	IF (@IDENTITY_COLUMN IS NOT NULL)
	BEGIN
		SET @QUERY =	@QUERY + '
		SELECT * FROM ' + @TABLENAME + ' WHERE ' + @IDENTITY_COLUMN + '= SCOPE_IDENTITY()'  	
	END
	ELSE
	BEGIN
		SELECT	@QUERY = @QUERY + ' ' + dbo.GetObjectQuery(@TableName) 
	END
	
	RETURN @QUERY
END
GO

ALTER FUNCTION DBO.GETINSERTQUERY( @TABLENAME VARCHAR(50))
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @COLUMNS VARCHAR(MAX) = '';
	DECLARE @PARAMS VARCHAR(MAX) = '';
	DECLARE @QUERY VARCHAR(MAX);
	
	SELECT @COLUMNS = @COLUMNS + C.NAME +',' , @PARAMS = @PARAMS + '@' + C.NAME +','
	FROM SYS.COLUMNS C 
		INNER JOIN SYS.TABLES T ON C.OBJECT_ID = T.OBJECT_ID  
		INNER JOIN SYS.SYSTYPES ST ON ST.XTYPE = C.SYSTEM_TYPE_ID
	WHERE T.NAME= @TABLENAME
		AND COLUMNPROPERTY(T.OBJECT_ID , C.NAME, 'ISIDENTITY') = 0
		AND COLUMNPROPERTY(T.OBJECT_ID , C.NAME, 'ISCOMPUTED') = 0 
		AND ST.NAME != 'TIMESTAMP'
	
	SET @QUERY = 'INSERT INTO ' + @TABLENAME + '(' + SUBSTRING (@COLUMNS,0, LEN(@COLUMNS)) + ') 
			VALUES ('+ SUBSTRING (@PARAMS,0, LEN(@PARAMS)) + ')' 
	
	RETURN @QUERY
END
GO

ALTER FUNCTION DBO.GETUPDATEQUERY(@TABLENAME VARCHAR(50))
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @COLUMNS VARCHAR(MAX) = '';
	DECLARE @CONDITION VARCHAR(MAX)= '';
	DECLARE @ROWVERSION VARCHAR(MAX) = '';
	SELECT @COLUMNS = @COLUMNS + C.NAME +' = @' + C.NAME +', '
	FROM SYS.COLUMNS C 
		INNER JOIN SYS.TABLES T ON C.OBJECT_ID = T.OBJECT_ID  
		INNER JOIN SYS.SYSTYPES ST ON ST.XTYPE = C.SYSTEM_TYPE_ID
	WHERE T.NAME= @TABLENAME
		AND COLUMNPROPERTY(T.OBJECT_ID , C.NAME, 'ISIDENTITY') = 0
		AND COLUMNPROPERTY(T.OBJECT_ID , C.NAME, 'ISCOMPUTED') = 0 
		AND ST.NAME != 'TIMESTAMP'

	SELECT @COLUMNS = REPLACE(@COLUMNS, COLUMN_NAME +' = @' + COLUMN_NAME +', ',''), @CONDITION = @CONDITION + COLUMN_NAME +' = @' + COLUMN_NAME +' AND '
	FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC
	INNER JOIN
		INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KU
			  ON TC.CONSTRAINT_TYPE = 'PRIMARY KEY' AND
				 TC.CONSTRAINT_NAME = KU.CONSTRAINT_NAME AND 
				 KU.TABLE_NAME = @TABLENAME
	ORDER BY KU.TABLE_NAME, KU.ORDINAL_POSITION;

	SELECT @ROWVERSION = C.NAME +' <> @' + C.NAME 
	FROM SYS.COLUMNS C 
		INNER JOIN SYS.TABLES T ON C.OBJECT_ID = T.OBJECT_ID  
		INNER JOIN SYS.SYSTYPES ST ON ST.XTYPE = C.SYSTEM_TYPE_ID
	WHERE T.NAME= @TABLENAME
		AND ST.NAME = 'TIMESTAMP'

		SET @CONDITION = ' WHERE ' + SUBSTRING (@CONDITION ,0, LEN(@CONDITION)-2)
	RETURN ( 
	'IF EXISTS(SELECT 1 FROM '+ @TABLENAME + @CONDITION + ' AND ' + @ROWVERSION +' ) 
	 BEGIN   
		RAISERROR(''The data you are about to save is modified by another user. Please reload the new data and save again.'' ,16,1, -999)   
	 END 
	 ELSE 
	 BEGIN 
		UPDATE ' + @TABLENAME + ' SET ' + SUBSTRING (@COLUMNS,0, LEN(@COLUMNS)) + @CONDITION
	+ ' END '
		)
END
GO 

ALTER FUNCTION DBO.GETOBJECTQUERY( @TABLENAME VARCHAR(50))
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @COLUMNS VARCHAR(MAX) = '';
	DECLARE @CONDITION VARCHAR(MAX)= '';
	SELECT @COLUMNS = @COLUMNS + C.NAME +', '
	FROM SYS.COLUMNS C INNER JOIN
	SYS.TABLES T ON C.OBJECT_ID = T.OBJECT_ID  
	 WHERE T.NAME= @TABLENAME

	SELECT  @CONDITION = @CONDITION + COLUMN_NAME +' = @' + COLUMN_NAME +' AND '
	FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC
	INNER JOIN
		INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KU
			  ON TC.CONSTRAINT_TYPE = 'PRIMARY KEY' AND
				 TC.CONSTRAINT_NAME = KU.CONSTRAINT_NAME AND 
				 KU.TABLE_NAME=@TABLENAME
	ORDER BY KU.TABLE_NAME, KU.ORDINAL_POSITION;

	RETURN ('SELECT ' + SUBSTRING (@COLUMNS,0, LEN(@COLUMNS)) + 
		' FROM ' + @TABLENAME +  
		' WHERE ' + SUBSTRING (@CONDITION ,0, LEN(@CONDITION)-2))
END
GO 


ALTER  FUNCTION DBO.GETDELETEQUERY( @TABLENAME VARCHAR(50))
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @CONDITION VARCHAR(MAX)= '';
	SELECT  @CONDITION = @CONDITION + COLUMN_NAME +' = @' + COLUMN_NAME +' AND '
	FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC
	INNER JOIN
		INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KU
			  ON TC.CONSTRAINT_TYPE = 'PRIMARY KEY' AND
				 TC.CONSTRAINT_NAME = KU.CONSTRAINT_NAME AND 
				 KU.TABLE_NAME=@TABLENAME
	ORDER BY KU.TABLE_NAME, KU.ORDINAL_POSITION;

	RETURN ('DELETE FROM ' + @TABLENAME +  ' WHERE ' + SUBSTRING (@CONDITION ,0, LEN(@CONDITION)-2))
END
GO 
ALTER FUNCTION DBO.GETMARKROWASDELETEQUERY(@TABLENAME VARCHAR(50))
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @CONDITION VARCHAR(MAX)= '';
	DECLARE @COLUMNS VARCHAR(MAX) = '';
	DECLARE @QUERY VARCHAR(MAX) = NULL;

	SELECT @COLUMNS = @COLUMNS + C.NAME +' = @' + C.NAME +', '
	FROM SYS.COLUMNS C 
		INNER JOIN SYS.TABLES T ON C.OBJECT_ID = T.OBJECT_ID  
		INNER JOIN SYS.SYSTYPES ST ON ST.XTYPE = C.SYSTEM_TYPE_ID
	WHERE T.NAME= @TABLENAME
		AND C.Name in ('IsDeleted','DeleteBy','DeleteOn')
	
	SELECT @CONDITION = @CONDITION + COLUMN_NAME +' = @' + COLUMN_NAME +' AND '
	FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC
	INNER JOIN
		INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS KU
			  ON TC.CONSTRAINT_TYPE = 'PRIMARY KEY' AND
				 TC.CONSTRAINT_NAME = KU.CONSTRAINT_NAME AND 
				 KU.TABLE_NAME = @TABLENAME
	ORDER BY KU.TABLE_NAME, KU.ORDINAL_POSITION;

	SET @CONDITION = ' WHERE ' + SUBSTRING (@CONDITION ,0, LEN(@CONDITION)-2)
	IF(LEN(@COLUMNS) > 0)
	BEGIN
		SET @QUERY = ' UPDATE ' + @TABLENAME + ' SET ' + @COLUMNS + @CONDITION
	END

	RETURN ( @QUERY )
END
GO 

SELECT DBO.GETDELETEQUERY('CATALOGFORMCONFIGURATION')
SELECT DBO.GETINSERTQUERY('CATALOGFORMCONFIGURATION')
SELECT DBO.GETUPDATEQUERY('CATALOGFORMCONFIGURATION')
SELECT DBO.GETOBJECTQUERY('CATALOGFORMCONFIGURATION')
SELECT DBO.GETINSERTWITHSELECTQUERY('CATALOGFORMCONFIGURATION')
SELECT DBO.GetMarkRowAsDeleteQuery('CATALOGDICTIONARY')

SELECT DBO.GETDELETEQUERY('CATALOGDICTIONARY')
SELECT DBO.GETINSERTQUERY('CATALOGDICTIONARY')
SELECT DBO.GETUPDATEQUERY('CATALOGDICTIONARY')
SELECT DBO.GETOBJECTQUERY('CATALOGDICTIONARY')
SELECT DBO.GETINSERTWITHSELECTQUERY('CATALOGDICTIONARY')
SELECT DBO.GETMARKROWASDELETEQUERY('CATALOGDICTIONARY')

GO

Create Procedure dbo.GetCatalogData 
@CatalogId Varchar(20),
@FilterText varchar(50),
@RegisterCols varchar(250)
AS
BEGIN 
--set @CatalogId ='CatCountry'
--set @FilterText ='India'

IF(len(@RegisterCols)>0)
 set @RegisterCols = ',' + @RegisterCols

	Declare @Query nvarchar(250)
	select @Query = 'Select ' + DisplayColumn + ' AS [Description], ' + ValueColumn + ' As [Code] '+ @RegisterCols +' From ' + TableName + ' where  ' + DisplayColumn + ' like ''%' + @filterText +'%'' Or ' + ValueColumn +' like ''%' + @filterText +'%'' or len('''+@filterText+''')=0' 
	from CatalogDictionary where CatalogId = @CatalogId
	exec sp_executesql @Query
END

Go

EXEC GetCatalogData  'CatCountry','In','ObjectId'